/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.Appointment.Appointment;
import Business.Enterprise.Enterprise;
import Business.Enterprise.LabEnterprise.Lab;
import Business.Enterprise.LabEnterprise.LabTest;
import Business.Enterprise.LabEnterprise.LabTestDirectory;
import Business.Network.Network;
import Business.Organization.Organization;
import static Business.Organization.Organization.Type.Lab;
import Business.Patient.Patient;
import Business.Person.Person;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTechnicianWorkRequest;
import java.awt.CardLayout;
import java.time.LocalDate;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author preranaurs
 */
public class AssignLabTestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AssignLabTestJPanel
     */
    private JPanel userProcessContainer;
    private Patient patient;
    private Person person;
    private Appointment appointment;
    private LabTestDirectory labTestList;
    private Lab lab;
    private Network network;
    private UserAccount userAccount;
    private Organization organization;
    private Date createdOn;

    public AssignLabTestJPanel(JPanel userProcessContainer, Patient patient, Appointment appointment, LabTestDirectory labTestList, Network network, UserAccount userAccount, Organization organization) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.patient = patient;
        this.appointment = appointment;
        this.labTestList = labTestList;
        this.network = network;
        this.userAccount = userAccount;
        this.organization = organization;
        populateNetworkLabs();
    }

    void populateNetworkLabs() {
        cmbLabs.removeAllItems();;

        List<Enterprise> enterprsList = network.getEnterpriseDirectory().getEnterpriseList();
        if (enterprsList.isEmpty() || enterprsList == null) {
            //nothing
        } else {
            for (Enterprise enterprise : enterprsList) {
                if (enterprise.getEnterpriseType().getValue().equals(Enterprise.EnterpriseType.Lab.getValue())) {
                    {
                        cmbLabs.addItem(enterprise);
                    }
                }
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        assignTestTbl = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        testTypeTxt = new javax.swing.JTextField();
        cmbLabs = new javax.swing.JComboBox();
        submitBtn = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        assignTestTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Test type", "Lab ", "Patient Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(assignTestTbl);
        if (assignTestTbl.getColumnModel().getColumnCount() > 0) {
            assignTestTbl.getColumnModel().getColumn(0).setResizable(false);
            assignTestTbl.getColumnModel().getColumn(1).setResizable(false);
            assignTestTbl.getColumnModel().getColumn(2).setResizable(false);
            assignTestTbl.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setText("Assign Lab Test");

        jLabel2.setText("Test type/name :");

        jLabel3.setText("Lab :");

        testTypeTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testTypeTxtActionPerformed(evt);
            }
        });

        cmbLabs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbLabs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLabsActionPerformed(evt);
            }
        });

        submitBtn.setText("Submit");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/assignLabTest.PNG"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(backJButton)
                        .addGap(205, 205, 205)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(229, 229, 229)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(submitBtn)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(testTypeTxt)
                                .addComponent(cmbLabs, 0, 171, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(jLabel4)))
                .addContainerGap(271, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(backJButton))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(testTypeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbLabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(submitBtn)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 227, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void testTypeTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testTypeTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_testTypeTxtActionPerformed

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        String testType = testTypeTxt.getText();
        //String labName = cmbLabs.getActionCommand();

        //String medsPrescribed= medsPrescribedTxt.getText();
        if (testType.equals("")) {
            JOptionPane.showMessageDialog(null, "Test Name cannot be empty");
        }   else
        { LabTechnicianWorkRequest workreq = new LabTechnicianWorkRequest();
                workreq.setStatus("New");
                appointment.setStatus(Appointment.AppointmentStatus.MarkforTest.getValue());
                workreq.setMessage("New Patient for Lab test, please confirm a Test Date");
                
                workreq.setSender(userAccount);
                workreq.setPatient(patient);
                //workreq.setDoctor(doctor);
                //workreq.setReceiver(userAccount);
                Lab lab = (Lab) cmbLabs.getSelectedItem();
                lab.getWorkQueue().getWorkRequestList().add(workreq);
                //UserAccount recepUseracc = null;
                //List<UserAccount> userAccDir=  organization.getUserAccountDirectory().getUserAccountList();
                //List<UserAccount> nurseList = enterprise.getUserAccountDirectory().getUserAccountList();
                //workreq.setReceiver(lab.getUserAccountDirectory().getUserAccountList().get(0));
   }
        populateLabTest();
        //String medsPrescribed= medsPrescribedTxt.getText();
//        if (testType.equals("") || labName.equals("")) {
//            JOptionPane.showMessageDialog(null, "Fields cannot be empty");
//        } else {
//            LabTest labTest = labTestList.addLabTest();
//            labTest.setPatient(patient);
//            labTest.setType(testType);
//            labTest.setLab(lab);
//            //dateTxt.setText("");
//            testTypeTxt.setText("");
//            cmbLabs.setActionCommand(labName);
//            //medsPrescribedTxt.setText("");
//            //appointment.setLabTestList(labTestList);
//            JOptionPane.showMessageDialog(null, "Lab test assigned sucessfully");

//        }
    }//GEN-LAST:event_submitBtnActionPerformed

    public void populateLabTest() {
        DefaultTableModel model = (DefaultTableModel) assignTestTbl.getModel();
        model.setRowCount(0);
        //for (UserAccount ua : system.getUserAccountDirectory().getUserAccountList()) {s
        for (LabTest labTest : labTestList.getLabTestList()) {
            Object[] row = new Object[4];
            row[0] = new Date();
            row[1] = labTest.getType();
            row[2] = labTest.getLab();
            row[3] = labTest.getPatient();
            model.addRow(row);
            
        }
    }
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void cmbLabsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLabsActionPerformed
        String str = String.valueOf(cmbLabs.getSelectedItem());
    }//GEN-LAST:event_cmbLabsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable assignTestTbl;
    private javax.swing.JButton backJButton;
    private javax.swing.JComboBox cmbLabs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton submitBtn;
    private javax.swing.JTextField testTypeTxt;
    // End of variables declaration//GEN-END:variables
}
