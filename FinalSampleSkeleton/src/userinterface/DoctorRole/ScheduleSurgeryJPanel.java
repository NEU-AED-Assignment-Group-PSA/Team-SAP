/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.Appointment.Appointment;
import Business.Appointment.AppointmentDirectory;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Medicine.MedicineDirectory;
import Business.Operation.Operation;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.Utility.Validation;
import Business.WorkQueue.NurseWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aditi
 */


public class ScheduleSurgeryJPanel extends javax.swing.JPanel {
 private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Patient patient;
    private Employee doctor;
    private Appointment appointment;
    private MedicineDirectory medicineList;
    private AppointmentDirectory prescriptionList;
    private Enterprise enterprise;
    private EcoSystem ecosystem;
    
    /**
     * Creates new form ScheduleSurgeryJPanel
     */
    public ScheduleSurgeryJPanel(JPanel userProcessContainer, Patient patient, Appointment appointment, Employee doctor,
            MedicineDirectory medicineList,EcoSystem ecosystem, Enterprise enterprise, UserAccount userAccount) {
       initComponents();
        this.userProcessContainer = userProcessContainer;
        this.appointment = appointment;
        this.patient = patient;
        this.doctor = doctor;
        this.ecosystem=ecosystem;
        this.medicineList = medicineList;
        this.enterprise= enterprise;
        this.userAccount = userAccount;
        patientNameTxt.setText(patient.getName());
        //doctorNameTxt.setText(doctor.getName());
        //docotr
        //appointment.
        //appointment.setPrescription(prescription);
        populateSurgery();
        populateOperationType();
        patientNameTxt.setEditable(false);
    }

    
    void populateSurgery(){
           DefaultTableModel model = (DefaultTableModel) tblSurgeyDetails.getModel();
        model.setRowCount(0);
        Operation operatn = appointment.getOperation();
        if(appointment.getOperation() == null)
        {
            return;
        }
        
        //for (Map.Entry<Medicine, Double> entry : appointment.getPrescription().getMedicinePrescribed().entrySet()){
         Object[] row = new Object[7];
            row[0] = operatn.getOprType();
            row[1] = operatn.getOperationDate();
            row[2] = operatn.getStatus() == null ? "New" : operatn.getStatus()  ;
            row[3] = operatn.getOperationCharge();
            row[4] = operatn.getBedAssigned() == null ? "Requested" : operatn.getBedAssigned() ;
            row[5] = operatn.getOperationDescription();
            row[6] = operatn.getPerson() == null ? "Not Assigned" : operatn.getPerson();
            //row[7] = operatn.get
            model.addRow(row);
    //}
        
        
    }
    
     public void populateOperationType(){
        cmbOperationType.removeAllItems();
        
        for (Operation.OperationType type : Operation.OperationType.values()){
            cmbOperationType.addItem(type.toString());
        }


    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scheduleSurgeryJPanel = new javax.swing.JPanel();
        appoinmtntDTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dateTxt = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        closebtn = new javax.swing.JButton();
        oprDesc = new javax.swing.JLabel();
        cmbOperationType = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtOprDescptn = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSurgeyDetails = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        scheduleSurgeryJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Add Schedule"));

        appoinmtntDTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appoinmtntDTxtActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Appointment ID:");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Patient Name:");

        jLabel3.setText("Schedule Date:");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        closebtn.setText("Close");
        closebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closebtnActionPerformed(evt);
            }
        });

        oprDesc.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        oprDesc.setText("Decription:");

        cmbOperationType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbOperationType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOperationTypeActionPerformed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Operation:");

        txtOprDescptn.setColumns(20);
        txtOprDescptn.setRows(5);
        jScrollPane2.setViewportView(txtOprDescptn);

        javax.swing.GroupLayout scheduleSurgeryJPanelLayout = new javax.swing.GroupLayout(scheduleSurgeryJPanel);
        scheduleSurgeryJPanel.setLayout(scheduleSurgeryJPanelLayout);
        scheduleSurgeryJPanelLayout.setHorizontalGroup(
            scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleSurgeryJPanelLayout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(oprDesc)
                    .addComponent(jLabel5)
                    .addGroup(scheduleSurgeryJPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(saveButton)))
                .addGap(27, 27, 27)
                .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closebtn)
                    .addGroup(scheduleSurgeryJPanelLayout.createSequentialGroup()
                        .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbOperationType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(appoinmtntDTxt)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(scheduleSurgeryJPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(26, 26, 26)
                                .addComponent(patientNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(scheduleSurgeryJPanelLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(dateTxt))))))
        );
        scheduleSurgeryJPanelLayout.setVerticalGroup(
            scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleSurgeryJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appoinmtntDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(patientNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbOperationType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(dateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(oprDesc)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closebtn)
                    .addComponent(saveButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblSurgeyDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Surgery Name", "Date", "Status", "Charge", "Bed number", "Operation Desciprtion", "Nurse"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblSurgeyDetails);

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 885, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(backJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(scheduleSurgeryJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(156, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(backJButton)
                .addGap(44, 44, 44)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79)
                .addComponent(scheduleSurgeryJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(341, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void appoinmtntDTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appoinmtntDTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_appoinmtntDTxtActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        
         DefaultTableModel model = (DefaultTableModel) tblSurgeyDetails.getModel();
        if(model.getRowCount()==1)
        {
            JOptionPane.showMessageDialog(null, "Operation is already created");
            return;
        }
        
        
        
        if(appoinmtntDTxt.getText().equals("") || patientNameTxt.getText().equals("") ||  dateTxt.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Fields cannot be empty");
            return;
        }
        else{
            try {
              //  int selectedrow=DoctorWorkAreaTable.getSelectedRow();
              //  if(selectedrow<0){
               //     JOptionPane.showMessageDialog(null, "Please select a patient");
               //     return;
              //  }
                Operation operation= new Operation();//(Operation)DoctorWorkAreaTable.getValueAt(selectedrow, 0);

               // Patient patient = this.patient;
              //  Appointment appointment = 

                String date1=dateTxt.getText();

                boolean check=Validation.validateDate(date1);

                if(check == false)
                {
                    JOptionPane.showMessageDialog(null, "Date is not valid");
                    return;
                }

                operation.setPatient(patient);

                operation.setOperationDate(date1);
                if(txtOprDescptn.getText() != null){
                    operation.setOperationDescription(txtOprDescptn.getText());
                }
                else {
                    operation.setOperationDescription(" ");

                }

                operation.setOperationCharge(10000.00);
                operation.setDoctor(doctor);
                operation.setStatus(Operation.OperationStatus.WaitingConfirmation.getValue());
                operation.setOprType((String)cmbOperationType.getSelectedItem());
                //set operation
                appointment.setOperation(operation);
                //changed next line status
                appointment.setStatus(Appointment.AppointmentStatus.Markforsurgery.getValue());
                NurseWorkRequest workreq = new NurseWorkRequest();
                workreq.setAppointment(appointment);
                workreq.setMessage("New Patient for Operation, please confirm an operation Date.");

                workreq.setSender(userAccount);
                workreq.setPatient(patient);

                //get today's Date->
                Date date= new Date();
                workreq.setRequestDate(date);
                workreq.setResolveDate(date);
                workreq.setStatus("New");
                UserAccount nurseUserAcc =null;
                //need employee list of the doctor's department -> organization
                // List<UserAccount> userAccDir=  organization.getUserAccountDirectory().getUserAccountList();
                //List<UserAccount> nurseList = enterprise.getUserAccountDirectory().getUserAccountList();
                //for(UserAccount account: userAccDir)
                // {
                    //    if(account.getRole().roleValue().equals("Nurse Role"))
                    //    {
                        workreq.setReceiver(null);
                        enterprise.getWorkQueue().getWorkRequestList().add(workreq);
                        //      }

                    //  }

                JOptionPane.showMessageDialog(null, "Schedule added successfully!");
                scheduleSurgeryJPanel.setVisible(false);
                appoinmtntDTxt.setText("");
                patientNameTxt.setText("");
                //bloodGrpTxt.setText("");
                dateTxt.setText("");
                txtOprDescptn.setText("");
                populateSurgery();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Date must be entered in YYYY-MM-DD format");
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void closebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closebtnActionPerformed
        scheduleSurgeryJPanel.setVisible(false);
    }//GEN-LAST:event_closebtnActionPerformed

    private void cmbOperationTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOperationTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbOperationTypeActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        Component [] componentArray = userProcessContainer.getComponents();
        Component c = componentArray[componentArray.length-1];
        DoctorWorkAreaJPanel ms = (DoctorWorkAreaJPanel) c;
        ms.populateRequestTable();

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField appoinmtntDTxt;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton closebtn;
    private javax.swing.JComboBox<String> cmbOperationType;
    private javax.swing.JTextField dateTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel oprDesc;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel scheduleSurgeryJPanel;
    private javax.swing.JTable tblSurgeyDetails;
    private javax.swing.JTextArea txtOprDescptn;
    // End of variables declaration//GEN-END:variables
}
